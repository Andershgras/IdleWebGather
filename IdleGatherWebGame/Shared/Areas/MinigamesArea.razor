@using IdleGatherWebGame.Models
@inject IdleGatherWebGame.Services.GameState GS
@implements IDisposable

<div class="mini-wrap">
    <div class="mini-header">
        <div>
            <strong>Minigames</strong> — Lv @GS.Minigames.Level
            (@GS.Minigames.Xp.ToString("0") / @GS.Minigames.XpForNextLevel.ToString("0"))
        </div>
        <div>Games played: <strong>@GS.MinigameGamesPlayed</strong></div>
    </div>

    <div class="mini-grid">
        @foreach (var m in MinigameRegistry.All)
        {
            var best = (GS.MinigameHighScores != null && GS.MinigameHighScores.TryGetValue(m.Id, out var h)) ? h : 0;
            <div class="mini-card">
                <div class="mini-icon">@m.Icon</div>
                <div class="mini-name">@m.Name</div>
                <div class="mini-blurb">@m.Blurb</div>
                <div class="mini-best">Best: <strong>@best.ToString("0")</strong></div>
                <button @onclick="@(() => PlayStub(m.Id))" title="Stub: simulates a score">Play (stub)</button>
            </div>
        }
    </div>
</div>

@code {
    protected override void OnInitialized() => GS.OnChange += Refresh;
    private void Refresh() => InvokeAsync(StateHasChanged);

    private void PlayStub(string id)
    {
        var score = Math.Round(Random.Shared.NextDouble() * 100, 0);
        GS.SubmitMinigameScore(id, score);
    }

    public void Dispose() => GS.OnChange -= Refresh;
}
